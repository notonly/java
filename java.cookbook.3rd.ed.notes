BattleShip (the classic naval combat game) <-- by MB (Milton Bradley ..

1.4 using CLASSPATH  effectively


java -classpath ~/example1/ex1.jar Example1

1) java interpreter looks dirs defined in CLASSPATH;

2) os tracing tool (trace, strace, truss, ktrace),  can see Java opens (or, stat, or access) the class file.

3) jdk class files,  in system props  (sun.boot.class.path)

4) jar file, unlike the single class file (using directory in classpath);  JAR file, needs to be in CLASSPATH defn

5) Web applications may NOT use bootpath or CLASSPATH;  those web apps having own ClassLoader, and set web app classpath to include WEB-INF/classes  (and the JAR files in WEB-INF/lib)

6) Create class files into CLASSPATH directories

   javac -d $HOME/classes Example1.java
	 java  -cp $HOME/classes/ pkg.Example1   (note, this command can be run from anywhere)


7) managing CLASSPATH in own env,

   set a base/main directory in $CLASSPATH
	 then make OPT_JARS including other JAR files or class-dirs;  and then adding them to $CLASSPATH


8)


1.5 Code Examples

   GitHub (https://github.com/IanDarwin/javasrcee)  

	 https://github.com/notonly/javasrc

	    javasrc
			darwinsys-api  (



1.9 Dealing with Deprecation Warnings

   javac -deprecation Example1.java

	 1) @Deprecated on method or class
	 2) @deprecated on javadoc

	 *) Rule of thumb:  if method/class is deprecated; NEW CODE should avoid using it.


1.10  check if we us  "System.properties"  for Runtime Debug (most likely NOT,  because, turn it on for RunTime requires rebooting the JVM.   We have re-load;  also some JMX stuff ... for updating the Log4J log level etc) ...

    if (System.getProperty("debug.fetch") != null) {
		    System.err.println("runtime debugging turned on");
		}

  java Example1   // will not see the debug

	java -Ddebug.fetch Example1   // will see the debugging, because the Runtime System.properties turned on, and code/class got the value


1.11  Correctness with Assertions


... Fast Forwarding ...

Chapter 9: Functional Programming

1) pure function, no side-effects, results depend only on their inputs and not on mutable state elsewhere in program
2) first-class function
3) Immutable data
4) extensive use of recusion and Lazy Evaluation


9.1 Using lambdas/closures in place of inner classes


My own notes:  how does Java implement (Java Compiler) handle closure -->  in the hood, still make closure to inner-class, and then some dynamic link (for groovy) type logic (vaguely remembered the Brian Goetz's presention ...


9.2 Using Predefined Interfaces, instead of own 

1) java.util.function package


interface Predicate<T> {
    boolean test(T t);
}


public List<Clazz> search(Predicate p);



9.3 simplifying processing with streams


1) production methods

2) passing methods (intermediate)  -- distinct, filter, limit, map, peek, sorted, unsorted

3) terminating methods -- count, findFirst, max, min, reduce, sum, collect ...



9.4 improving throughput with parallel streams and collections

<== no example from the book, just four bulletin-points


9.5 creating own functional interfaces

1) make sure just 1 non-default (or non-optional) method in that Interface; or

2) use @FunctionalInterface annotation 

   a.  define own functional interface

	      public interface MyFuncIntfc {
				    int computer(int x);
				}


				OR

				@FunctionalInterface
				public interface MyFuncIntfc {
				    int computer(int x);
				}

	 b.  apply it

	      public class ProcessInts {
				    static int[] ins = {0, 1, 2, 3};
						
						// THIS IS REALLY WHAT I NEED MORE USAGE ON THESE PATTERNS; (I more familiar with small closure usage) ...
						// Passing in the functions ... ;  and inside apply it
						static int doMath(int n, Function<Integer, Integer> func) {
						    return func.apply(n);
						}

			      public void static main(String[] args) {
							...
						}
				}




9.6 Using Existing Code as Functional with Method References   (Functional METHODS)  -->  MyClass::myFunc  ...

   If already have existing code matching a functional interface, and want to use it without renaming methods to match the interface name.


   Arrays.sort(names, String::compareToIgnoreCase);  // names array of {"a", "b", "d", "c"};

   Arrays.sort(names, String.CASE_INSENSITVIE_ORDER);  // the existing comparator


9.7 Java Mixins: Mixing in Methods 

1) what is mixin ? 

2) using "static import" feature to implement mixin 

     (cons:  static method, not instance method) 


3) pull method from Multiple Interfaces ....

   interface Bar {
	    default String filter(String s) {
				return "Filtered " + s;
			}
	  }

		interface Foo {
			  default String convolve(String s) {
				  return "Convolved " + s;
				}
		}



   public class MixinsDemo implements Foo, Bar {
	   ...

		 private String process(String s) {
		 	 return filter(convolve(s));  // methods mixed in
		 }
	 }




Alas,  this book finished Functional Programming in such a short chapter ....



Chapter 19 Processing JSON Data

19.1 creating JSON string, using StringBuilder


19.2 Parsing and Writing JSON with Jackson

  ObjectMapper 

	  mapper.writeValue(System.out, new Person("name", 33));


	  mapper.readValue(jsonInputStream,  Person.class);


19.3 Parsing and Writing JSON with org.json

  ? mid-size, widely used JSON API   -- This is also used in Android app


	// READ 

   JSONObject obj = new JSONObject(new JSONTokener(jsonInputStream));  // InputStream can come from file

	 System.out.println("name : " + obj.getString("name"));


	// WRITE
	JSONObject obj = new JSONObject();
	obj.put("name", "Ray");
	   .put("age", 33);

	System.out.println(obj.toString());



Chapter 10 Input and Output


Java two sets of classes for reading/writing.

***) "Stream" section of package java.io for BYTES (reading/writing)

old language may assume that a byte (8-bits) is same as "character" (letter, digit)  <== the author was talking about ASCII (256 chars in total 2^7) encoding here     

***) Java for Internationalization,  UTF-8 (2^15 ? two-bytes, 16-bits)
     Unicode

		 Java and XML allows Unicode, so that we can read and write human languages.

		 Use "Writer/Reader", not "Stream", for textual data;


     converting Unicode strings to external files

     using "Reader/Writer", instead of "InputStream/OutputStream",  <== 




10.1 Reading standard input


a) read 1 byte from system input
  
	 int b = System.in.read();

b) To read a value of a known type, from standard input, using Scanner class

   Scanner sc = Scanner.create(System.in);

	 int i = sc.nextInt();


c) use Reader class to get Multiple-Encodings

   read lines of characters, using BufferedReader

***)  Writer

   BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	 String line;

	 while( (line = br.readLine()) != null) {
	   System.out.println(line);
	 }



10.2  Reading from Console or Controlling Terminal --  reading passwords without echoing

  System.console()    // can return NULL

	String name = System.console().readLine("name?");

	// Read passwords without echoing;  using Console class
	char[] pwd = null;
	Console cl = System.console();

  if (cl != null) {
	  try {
	    pwd = cl.readPassword("Password:");

			// can send the pwd to downstream for security check
			System.out.println("pwd is: " + new String(pwd));

    } finally {

		  // clear the memory for security reason
			if (pwd != null) {
			  java.util.Arrays.fill(pwd, ' ');
			}
		}
	}


	  
10.3  Writing standard output or standard error

1) System.out is PrintStream connected to "standard out"
2) System.err is PrintStream connected to "standard error"

3) PrintWriter has similar methods as PrintStream
 
   PrintWriter pw = new PrintWriter(System.out);
	 pw.println("answer: ");


10.5 StreamTokenizer

  StringTokenizer st = new StringTokenizer("john@gmail.com", "@", true);

  String user = (String) st.nextElement();		// alas, need to cast
	String host = (String) st.nextElement();


10.6  Scanning input with Scanner Class


  Scanner, modeling C's scanf(),  but also has functionality of StreamTokenizer,
	  yet still need to be aware of the type of token, hence hasNextByte() and nextByte() etc methods.


		String dt = "25 Dec 2019";

		try(Scanner sdt = new Scanner(dt)) {
		  int d = sdt.nextInt();
			String m = sdt.next();
			int y = sdt.nextInt();
		}


10.7 Scanning input with Grammatical Structure

  1) StreamStokenizer and Scanner have limited number of tokens processed; but 

	2) "Parser generators" can do more; like C's yacc (Yet Another Compiler Compiler) and lex releases around 1970s.

	    "ANTLER"
			JavaCC (open source java.net)
			JParsec write parser in straight Java, all built at compile time. It's on GitHub now
			JFlex and CUP work together like yacc and lex.
			Parboiled uses "Parsing Expression Grammar" (PEG) to build parser at compile time, on GitHub
			Rats! parser generator is part of eXTensible Compiler Project at New York Univ
			Other compiler compiler, maintained at Java Source.

	Those "compiler geneartors" can be used to write "grammars" for a wide range of programs, from simple calculators, to HTML, full Java, C/C++ compilers.

	
	In simple application, "recursive descent parser" may be sufficient.



10.8  Opening a file by name


BufferedReader br = new BufferedReader(new FileReader("file.txt"));
BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("bytes.exe"));

InputStream is = new FileInputStream("input.txt");
OutputStream os = new FileOutputStream("output.txt");

byte[] bts = new byte[500];
int i;

while ((i = is.read(b)) != -1) {
 os.write(b, 0, i);
}

is.close();
os.close();


10.10 Reading a File into a String


10.11 Reassigning the standard streams

  System.in, System.out, System.err


***) sent standard errors to log file

	String logfile = "error.log";

	System.setErr(new PrintStream(new FileOutputStream(logfile)));

	// now create err stuff
	int a = new int[5];
	a[10] = 0;  // ArrayIndexOutOfBoundsException err which is written to error.log


***) send standard errors to standard out

  System.setErr(System.out);



10.12 Duplicating a Stream as it is written 



10.13 Reading/Writing a different character set

  InputStreamReader and OutputStreamWriters are used to convert text to/from Unicode

	BufferedReader fromJp = new BufferedReader(new InputStreamReader(new FileInputStream("jp.txt", "EUC_JP")));

	PrintWriter toSwedish = new PrintWriter(new OutputStreamWriter(new FileOutputStream("swedish.txt", "Cp278)));



10.14 handle pesky end-of-line characters

  \r , \n, or combined

	networking code ...



10.15 Platform-dependent file code

  

10.16 Reading "Continued" lines

  

10.17 Reading/Writing Binary Data

  ***)  DataInputStream or DataOutputStream


	String filenm = "input.txt";
	DataOutputStream os = new DataOutputstream(new FileOutputStream(filenm));

	int i = 3;
	double d = 0.5;

	os.writeInt(i);
	os.writeDouble(d);
	os.close();


10.18 Seeking to a position within a File

  ***) RandomAccessFile


  ReadRandom rr = new ReadRandom("input.txt");

	System.out.println("offset : " + r.readOffset());



	RandomAccessFile seeker = new RandomAccessFile("input.txt", "r");
	seeker.seek(0);    // move to the beginning
	seeker.readInt();  // read the offset

	seeker.seek(readOffset());
	seeker.readLine();



10.19 Writing data streams from C language


10.20 Saving and Restoring Java Objects

  ***) using ObjectInputStream and ObjectOutputStream


	  writeObject(), readObject() 


		public class MData implements Serializable {
		  private static final long serialVersionUID = 1L;

			private String name;

			private int age;

			.

			,
			,

		}

		
		ObjectOutputStream os = new ObjectOutputStream(new BuggeredOutputStream(
																											new FileOutputStream("out.txt)));

		os.writeObject(new MData("John", 33));

		os.close();


10.21 Serialization, prvent ClassCastExceptions with SerialVersionUID

  -->  CalssCastExceptions can be raised, if the Class (MData above) got updated and re-compiled, and then, not compatible ...

	
	when objects used in RMI (remote method invocation), or Servlets,  ...



   ***)  JDK tool  "serialver"  can check the UID for a class file.   (it's only meaningful to apply it on classes implementing Serializable interface)



10.22 Reading/Writing JAR or ZIP arhcives


  java.util.zip.ZipFile

	ZipEntry has getName(),  getInputStream(),  


	ZipFile zf = new ZipFile("input.zip");
	Enumeration all = zf.entries();
	while (all.hasMoreElements()) {
	  ZipEntry e = (ZipEntry) all.nextElement();

		if (e.isDirectory()) {
		  System.out.println("Directory: " + e.getName());
		} else {
		  System.out.println("File: " + e.getName());
		}

		.
		.
		.

	}


10.23 Finding files in a Filesystem-Neutral way with getResource() and getResourceAsStream()


   getClass(), getClassLoader(), getResource(), getResourceAsStream()


	 "Class", "ClassLoader" classes


	 public InputStream getResourceAsStream(String);

	 public URL getResource(String);

	 public Enumeration<URL> getResources(String) throws IOException;


	 --> locate "resource" or file on "classpath" ...


	 ^^ Need to check null value


10.24 Reading/Writing Compressed files

  GNU gzip/gunzip 

	// Java IO uses a lot of Decorator Design Pattern
	FileInputStream fis = new FileInputStream("input.txt");
	GZIPInputStream gzis = new GZIPInputStream(fis);
	InputStreamReader isr = new InputStreamReader(gzis);
	BufferedReader br = new BufferedReader(isr);

	String line;
	while ((line = br.readLine())) {
	  System.out.println("line: " + line);
	}



10.25 Communications API for Serial and Parallel Ports

  Peripheral devices, serial ports (RS232/434, COM, tty),  parallel (printer, LPT) ports

	USB (Universal Serial Bus)

	JSR-80 (Java Standards Request - 80) -- API accessing USB 

	java.comm API, 


	Communication API in NutShell 

	1) Abstract class - CommPort
	2) two subclasses - SerialPort and ParallelPort
	3) static factory CommPortIdentifier.getPortIdentifiers() -- list of ports, 
	4) CommPortIdentifier's open() method to receive CommPort object 


@SuppressWarnings("unchecked")
Enumeration<CommPortIdentifier> ports = CommPortIdentifier.getPortIdentifiers();

CommPortIdentifier cpi;
boolean atLeastOneSerialPresent = false;

while (ports.hasMoreElements()) {
  CommPortIdentifier pi = ports.nextElement();

	if (pi.getPortType() != CommportIdentifier.PORT_SERIAL) {
	  System.out.println("Not serial port: " + pi.getName());
		continue;
	}

	.
	.
	.

	// if found serial port
	CommPort cp = pi.open("something", time-out-numbers);
	SerialPort sp = (SerialPort) cp;
	sp.setSerialPortPamas(baud-rate_19200, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, 
																				 SerialPort.PARITY_NONE);

	// Once we get the Serial Port, we can open the inputstream from it
	InputStream is = new BufferedReader(new InputStreamReader(sp.getInputStream()));
	OutputStream os = new PrintStream(sp.getOutputStream(), true);


	// communication
	os.println("HELLO");
	String rspn = is.readLine();

	System.out.println("sent: HELLO" + ", got response: " + rspn);

	if (is != null) {
	  is.close();
	}
	if (os != null) {
	  os.close();
	}
}


***)  javacomm/CommPortOpen.java

      ParallelPrint
			CommPortModem
			CommPortDial
			TModem
			SerialLogger
			CommPortThreaded



10.26 Save User Data to Disk

 Five-step 

 1) create temp file, arrange for it to be removed automatically with deleteOnExit(true)
 2) write user data to the temp file, if any exceptions raised, the previous user data file is intact.
 3) delet eht backup file if exists
 4) rename user's previous file to *.bak
 5) rename the temp file to saved file.


 public class FileSaver {

	 private enum State { AVAILABLE, INSUE }

	 private State st;
	 private final File inf;
	 private final File tmpf;
	 private final File bkp;

	 public FileSaver(File input) {
	   inf = input;

		 tmpf = new File(inputFile.getAboslutePath() + ".tmp");
		 tmpf.createNewFile();
		 tmpf.deleteOnExit(true);

		 bkpf = new File(inf.getAbsolutePath() + ".bkp");

		 st = State.AVAILABLE;
	}
}



	10.27 Program: Text to PostScript

	   Note there is opensource Java PDF API ...




Chapter 23 Reflection -- gathering information from JVM

  java.lang.Class
	java.lang.reflect 


	1) load classes on the fly
	2) find methods and fields of a class
	3) construct a class from scratch (from an array of bytes) dynamically.


	***) JVM a large program, written in C/C++, implementing the Abstraction 

	***) "dyanmic loading" -- walk-up the tree of class hierarchy 

	    java -verbose MyClass    (which shows the dynamic loading)



23.1 Getting Class Description

  if type name is known at compile time, can get class instance using compiler keyword .class (also works for the either primitive types)

	Otherwise, java.lang.Object.getClass() will return Class object for the objet's class


	System.out.println("String class: " + String.class);

	System.out.println("Calendar.getInstance().getClass());


23.2 Finding and using Methods and Fields

  ***) java.lang.reflect



 JShell snippet :  


import java.lang.reflect.*;
import java.util.Arrays;
import java.util.List;

    try {
        Class<?> c = Class.forName("java.lang.String");

        List<Constructor<?>> ctors = Arrays.asList(c.getConstructors());
        ctors.forEach(e -> System.out.println(e.toString()));

        System.out.println("\n__________________________________\n");

        List<Method> mtds = Arrays.asList(c.getMethods());
        mtds.forEach(e -> System.out.println(e.toString()));

    } catch (Exception e) {
        e.printStackTrace();
    }




        // Cannot reflection FINAL fields ?
        // java.lang.IllegalArgumentException: Can not set final [B field java.lang.String.value to java.lang.Class
        // ^^^ https://stackoverflow.com/questions/3301635/change-private-static-final-field-using-java-reflection
        try {
            String sf = new String("checking reflection Fields");
            Class<?> cs = sf.getClass();

            List<Field> flds = Arrays.asList(cs.getDeclaredFields());

            flds.forEach(f -> {
                try {
                    Field modifiersField = Field.class.getDeclaredField("modifiers");
                    modifiersField.setAccessible(true);
                    modifiersField.setInt(f, f.getModifiers() & ~Modifier.FINAL);
                    f.setAccessible(true);
                    System.out.println(f + " : " + f.get(sf));
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
            });






BUT following works : 


class Test1 {
    private final String value;
    private final int hash;

    public Test1(String v, int h) {
        value = v;
        hash = h;
    }
}

        final Test1 t = new Test1("John", 33);
        Class<?> cs1 = t.getClass();
        List<Field> flds1 = Arrays.asList(cs1.getDeclaredFields());
        flds1.forEach(f -> {
            try {
                f.setAccessible(true);
//                System.out.println(f + " : " + f.get(cs));
                System.out.println(f.toGenericString() + " : " +  f.get(t));
            } catch (Exception e) {
                e.printStackTrace();
            }
        });



RESULT : 

private final java.lang.String REPL.$JShell$30$Test1.value : John
private final int REPL.$JShell$30$Test1.hash : 33



23.4 Loading and Instantiating a class dynamically


*** using class.forName("class-name") and class's newInstance() method

Class<String> sClazz = (Class<String>) Class.forName("java.lang.String");
String s = sClazz.newInstance();



23.5 Constructing a Class from Scratch with a ClassLoader

***) JVM has a built-in class loader
***) examine the URLClassLoader, to loadd class via internet
***) create own classloader, and use it


1) when write a class loader, loadClass() method needs to get the "class file" into a byte array (read the class file into byte array), 
2) convert the byte array into a Class object, and return the result


<=== book does not give example; 

// https://www.baeldung.com/java-classloaders
// This 5-blogs also helped get more information:  https://analyzejava.wordpress.com/2014/09/25/java-classloader-what-is-a-classloader/

1) Bootstrap class loader              <== implemented in C/C++
   parent of all other classloaders

	 can load java.lang.System, java.lang.Integer, etc

2) Extension Class Loader
   to load exntensions of the standard core Java classes

	 load classes from $JAVA_HOME/lib/ext

3) System Class Loader

   loads files found in CLASSPATH 


***) 


***) NoClassDefFoundError 
***) ClassNotFoundException

if classloader not able to find the class;  but what is the difference?


// will follow-up this post :  https://www.baeldung.com/java-classloaders


23.6 Performance Timing

System.currentTimeMillis()

JavaOne 2003 paper "Garbage Collection in the Java HotSpot Virtual Machine"

JavaOne 2007 talk by the same GC Development team "Garbage-Collection-Friendly Programming"

JavaOne 2010 "The Garbage Collection MythBusters"


23.7 Printing Class Information

  getFields() and getMethods() ...



23.8 Listing Classes in package

final Enumeration<URL> urls = Thread.currentThread()
																		.getContextClassLoader()
																		.getResources(pageName.replace(".", "/"));


23.9 Using and Defining Annotations (this is how JUnit was built)

***) apply annotations in code use @AnnotationName before class/method/field 

***) define annotations with @interface at the same level as class, interface etc.


1) public @interface IExpressAnnotation { } 

2) javac IExpressAnnotation

3) javap IExpressAnnotation  

   will display the following :

	 public interface IExpressAnnotation extends java.lang.annotation.Annotation {
}



***)  using javap to check Java Annotation class

javap java.lang.annotation.Annotation

javap java.lang.annotation.Annotation
Compiled from "Annotation.java"
public interface java.lang.annotation.Annotation {
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public abstract java.lang.String toString();
  public abstract java.lang.Class<? extends java.lang.annotation.Annotation> annotationType();
}



***) Annotation can be configured that compiler will only allow it in certain points in the code.


// Define annotation

@Target(ElementType.TYPE)              // only applies MyAnnotation to class/interface type
@Retention(RetentionPolicy.RUNTIME)    // MyAnnotation is preserved at Runtime 
public @interface MyAnnotation {
  public boolean fancy() default false;
	public int order() default 20;
}


// Using custom annotation
@MyAnnotation(fancy = true, order = 11)
@Resource(name = "Somestuff")
public class FancyOrderedStuff {
  Class<?> c = FancyOrderedStuff.class;

	System.out.println("Class " + c.getName() + " has following annotations: ");

	for (Annotation a : c.getAnnotations()) {
	  if (a instanceof MyAnnotation) {
		  MyAnnotation ma = (MyAnnotation) a;
			System.out.println("\t" + a + " with fancy=" + ma.fance() 
			                            + "and order=" + ma.order());
		} else {
		  System.out.println("\tdifferent annotation than MyAnnotation: " + a);
		}
	}
}




23.10 Finding Plug-in-like Classes via Annotations

<-- need to revisit 


23.11 

<-- need to revisit



Chapter 5 -- Numbers

int    -- 32-bits
long   -- 64-bits

float  -- 32-bits
double -- 64-bits

char   -- 16-bits


BigInteger -- unlimited-size  (Arbitrary-size immutable integer value)  <-- I did Not used much 

BigDecimal -- precision, used a lot (Arbitrary-siz-and-precision immutable floating-point value)


5.1 

   Double.parseDouble("1.2");


5.2 
   
	 Casting and downcast  


5.3 Generating Random Numbers

java.lang.Math.random()

seed

.nextInt()

.nextDouble()





Chapter 6 -- Dates and Times 

1) Stephen Colbourne -- Joda-Time, and JSR-310

2) "ISO 8601" --  2019-01-15T10:23:05

3) operations -- adding/subtracting dates/time

4) almost all objects are immutable, thread-safe (cost?  in not-requiring thread-safe env)

5) "no" setters,  also "getters" not making sense,  New Java Date Time API provides new methods to replace setter/getter ...

   at -- combines with another object
	 format
	 from -- Factory: converting input parameters to instance of target
	 get -- Retrieve one field from the instance
	 is  -- examine the state of a given obj
	 minus --
	 of -- Factory: create new method by parsing inputs
	 parse -- Factory: parse a single input to produce instance of target
	 plus --
	 to -- convert this object to another type
	 with -- return a copy with the given field changed, replaces "setters"


6) Y2k 

7) Y2038 -- avoided by applying 64-bit time value in milliseconds since 1970 will not overflow to August 17,292,278.994 CE 


8) New Date/Time API (packages)

java.time           -- dates, times, instants, and durations
java.time.chrono    -- API for non-ISO calendar systems
java.time.format    -- formatting classes
java.time.temporal  -- date and time access using fields, units, adjusters
java.time.zone      -- zone and the rules


9) basis:

Instant -- a point in time since 1/1/1970, expressed in nanoseconds
Duration -- length of time, expressed in nonoseconds


10) Human time

Calendrical  -- connects to low-level api
DateTimeFields -- stores a map of field-value pairs
DayOfWeek -- 
LocalDate
LocalDateTime
MonthDay
OffsetDateTime
OffsetDateTime
Period
ZonedDateTime
Year
YearMonth


11) Utils

ZoneOffset
ZoneId



// 5 hours ago
LocalTime time = LocalTime.now().minusHours(5);


// current time 

LocalDate d = LocalDate.now();

LocalTime t = LocalTime.now();

LocalDateTime dt = LocalDateTime.now();


// Format date and time

java.time.format.DateTimeFormatter


// Converting among dates/times, YMDHMS, and Epoch seconds

//   convert number of seconds since the Epoch, to a local date/time
Instant epochSec = Instant.ofEpochSecond(1000_000L);

ZoneId zid = ZoneId.systemDefault();

ZonedDateTime dt = ZoneDateTime.ofInstant(epocSec, zid);


//   convert date/time to epoch seconds
long epochsec = ZonedDateTime.now().toInstant().getEpochSecond();

LocalDateTime now = LocalDateTime.now();
ZonedDateTime zdt = now.atZone(ZoneId.of("Cananda/Pacific"));


//
LocalDateTime ldt = LocalDateTime.parse("2019-01-18T10:01");



6.5 difference between two dates

using Period.between() 

LocalDate endofcentuary = LocalDate.of(2000, 12, 31);
LocalDate mnow = LocalDate.now();

Period diff = Period.between(endofcentuary, mnow);


6.6 Adding/subtracting date or calendar

LocalDate now = LocalDate.now();
Period p = Period.ofDays(100);
LocalDate then = now.plus(p);


6.7 Interfacing with legacy date and calendar classes.

  
Legacy             to-legacy                to-new

util.Date         date.from(Instant)        Date.toInstant()
util.Calendar     calendar.toInstant()      -
GregorianCalendar  .from(ZonedDateTime)     calendar.toZonedDateTime()
util.Timezone     -                         timeZone.toZoneId()
DateTimeFormatter -                         dateTimeFormater.toFormat()




Date dt = new Date();
LocalDatetime new = LocalDateTime.ofInstant(dt.toInstant(), ZoneId.systemDefault());


Calendar c = Calendar.getInstance();
LocalDateTime nc = LocalDateTime.ofInstant(c.toInstant(), ZoneId.systemDefault());




Chapter 7 -- Java Data Structure


7.1 arrays

int[] nbrs = {1, 2, 3};
String[] words = new String[3]; 

int[][] matrix = new int[10][];
IntStream.range(0, 10).forEach(i -> matrix[i] = new int[5]);  // create 10x5 matrix

IntStream.rangeClosed(0, 9)....


7.2 resizing array


7.3 collections

Interface   Resizable-array     Hashed-table        Linked-list    Balanced-tree
Set                               HashSet                            TreeSet
List        ArrayList, Vector                        LinkedList
Map                             HashMap, HashTable



7.4 ArrayList

add(Object)
add(int i, Object o)
clear()
contains(Object)
get(int)
indexOf(Object)
remove(Object),  remove(int)
toArray()


7.5 Using Generics

List<String> words = new ArrayList<>();


7.6 Avoid casting by using generics

// parameterized class
public class MyStack<T> implements SimpleStack<T> {
.
.
.

}


// parameterized methods


7.7 Iterate structured data

Iterable.forEach
foreach
java.util.Iterator
Enumeration


Iterator<MyData> iterator = myDataList.iterator();
while(iterator.hasNext()) {
  System.out.println("print data : " + iterator.next());
}


7.8 rmove duplicates by using Set


7.9 Iterator


7.10 Structuring data in a Linked List

ListList<String> words ...

words.hasNext();
words.hasPrevious();



7.11 Hashtable, HashMap

entrySet()  -->  a set of Map.Entry
keySet()
valueSet()



7.12 Storing Strings in Properties and Preferences

java.util.prefs.Preferences
java.util.Properties


Preferences prefs = Preferences.userNodeForPackage(MyClass.class);

String txt = prefs.get("textFontName", "lucida-bright");
...

prefs.put("textFontName", "times-roman");

Preferences child = prefs.node("a/b");
child.putInt("medium", 41);
child.putDouble("pi", Math.PI);


// Dupe the subtree in an XML
prefs.exportSubtree(System.out);

==> produce the tree in xml


**) properties

Properties props = new Properties();

props.put("test", "passed");
props.put("result", 55);

// Load additional properties
props.load(System.in);

// list merged properties
props.list(System.out);



7.13 Sorting Collection

Arrays.sort()
Collections.sort()


public class SubstrComparator implements Comparator<String> {
 
  @Override
	public int compare(String s1, String s2) {
	  return s1.substring(1).compareTo(s2.substring(1));
	}

}


String[] words = {"a", "z", "d", "b"};

Arrays.sort(words, new SubstrComparator());



***)  Comparable vs Comparator 


java.lang.Comparable<T>   provides natural order to objects, written in the class whose objects are being sorted

        int compareTo(T o)


java.util.Comparator<T>   providers total control over sorting objects of another class.  

        int compare(T o1, T o2)
				boolean equals(T clazz2)



7.14 Avoiding the urge to sort

// TreeSet keeps the order, use a comparator, String.CASE_INSENSITIVE_ORDER for instance

TreeSet<String> ss = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
ss.add("test");
ss.add("value");


// Convert HashMap to TreeMap, hence get sorted

TreeMap sorted = new TreeMap(unsoretedHashMap);



7.15 Finding an object in a collection


Methods                          implementing classes
binarySearch()                  Arrays, Coolections
contains()                      ArrayList, HashSet, HashTable, LinkedList, Properties, Vector
containsKey()                   HashMap, HashTable, Properties, TreeMap
containsValue()                  same as the ablve
indexOf()                       ArrayList, LinkedList, List, Stack, Vector
search()                        Stack



7.16 Converting collection to an array

// not good example, empty array
(new ArrayList<String>().toArray();



7.17 Creating own Iterator

public class ArrayIterator<T> implements Iterable<T>, Iterator<T> {
  protected T[] data;

	protected int idx = 0;

	public ArrayIterator(final T[] d) {
	  setData(d);
	}


  // methods of Iterable
	@Override
	public Iterator<T> iterator() {
	  index = 0;
		return this;
	}


	// methods of Iterator

	@Override
	public boolean hasNext() {
	  return (index < data.length);
	}


	@Override
	public T next() {
	  if (hasNext()) {
		  return data[index++];
		}

		throw new NoSuchElementException("only " + data.length + " elements");
	}


	@Override
	public void remove() {
	  .
		.
		.
	}

}




7.18 Stack


.
.
.


7.19 Multidimensional Structures 

.
.
.


7.20 Timing comparisons


8.2 Override equals() and hashCode() methods


***)  equals and hashCode CONTRACT ...

    ^^^ objects are .equals(),  must have the same .hashCode()


		^^^  need to know how hashmap works under the hood ...

		   1) when entry put in HashMap,  the .hashCode() is calculated first for the "key",
			    and then the correct "bucket" is chosen;
				   
		   2) and then, in the "Array" sharing the same "bucket",  the .equals() is used.  

			 Hence, when override .hashCode(),  also need to override .equals() (the default
			 impl of equals just reference comparison ==),  to make sure the key 


    HashMap uses hash table, and hash-bucket are a function of object's .hashCode() 


    .equals() also used for Set



^^^ Java HashMap implementation is worth of studying

   1) the TreeNode when hash-bucket elements grow more

	 and other methods ...



8.2 alternatives to Clone


   copy-constructor



8.3 Using shutodnw hooks for Application cleanup 

  Runtime.getRuntime().addShutdownHook(new Thread() {
	  public void run() {
		  System.out.println("Running Shutdown hook");
		}
	}



8.4 Using inner classes

tie a Class to another one


8.5 provider callbacks via interfaces


commonly used interfaces

1) Runnable, Comparable, Clonable
2) List, Set, Map, Enumeration/Iterato
3) ActionListener, WindowListener, ... UI part
4) Driver, Connection, and ResultSet
5) "remote interface"



The book has class diagram for a "building management system" <-- Root is the "Asset" class,
and then, the "ComputerAsset", "BuildingAsset";


8.6 Polymorphism, Abstract Methods

1) why using Abstract class

    a. by nature, Annimal,  Shape ...

		b. by common functionality,  abstracted to a common place/class,  -->  others inherits from here

    c. good candidates for Factory, and other type of pattern implementations


2) why using Interface

    a. common contract

		b. good for multiple-implmenting area;  a class can only "extends" 1 class; 
		   but "implements" multiple interfaces


		c. Interface is also a type, great for Polymorphism implementations ...




8.7 Passing values



8.8 Using typesafe Enumerations



8.9 Enforcing Singleton pattern


-->  Check 

java.util's singletonList(), singletonMap(), singletonSet()

 which provides "immutable" List, Map, Set;  




===>  extracted from JavaDoc of Class.java

***)  Enum is kind of "class" which not allowed to be extended
      Annotation is kind of "interface" ...

			Every array also belongs to a class that reflected as "Class" object

			"primitive" types (boolean, int, byte, char, short, etc) 
			   and the keyword "void" are also "Class" object.


"Class" does not have constructore;  its objects are generated by JVM; 



8.10 Create own Exceptions


8.11 Using Dependency Injection




Chapter 3 -- String


3.2 breaking string into words

  StringTokenizer st = new StringTokenizer("Hello world from Java");

	while (st.hasMoreTokens()) {
	  System.out.println("Token: " + st.nextToken());
	}


3.3 StringBuilder




3.4 processing a string one character at a time

for (char c : "Hello world".toCharArray()) {
 ...
}




3.6 Converting between Unicode characters and Strings


StringBuilder sb = new StringBuilder();

sb.append('\u00a5');  // Japanese Yen symbol



3.7 Reversing a string by word or by character

// reverse by character
StringBuilder.reverse() ...

// reverse by word
   a. StringTokenizer
	 b. using Stack to push and pop


  ^^ but, why not looping from the last element, and backward ...



Chapter 4 -- Pattern matching with Regular Expression  (RegEx)


subexpression           matches                          notes
\^                      starting of line/string 

$                       end of line/string

\b                      word boundary
\B                      NOT a word boundary

\A                      Begining of entire string



\z                      end of entire string
\Z                      end of entire string (except allowable final line teminator)


[...]                   "Character class", any one character from those listed
[\^...]                 Any one character NOT from those listed


alternation and grouping

(...)                   grouping (capture groups)
|                       alternation
(?:_re_)                noncapturing parenthsis

\G                      end of previous match
\n                      back-reference to capture group number "n"


Normal (greedy) quantifiers

{m,n}                   Quantifier fro "from m to n repetitions"
{m, }                   Quantifier for "m or more repetitions"
{m}   								  Quantifier for "exactly" m repetitions
{ ,n }                  Quantifier for 0 upto n repetitions
\*                      short for {0, }
+                       short for {1,}
?                       short for 0 or 1 repetition


Reluctant (non-greedy) quantifiers

{m,n}?                  Reluctant quantifier for "from m to n repetitions"
{m,}?                   Reluctant quantifier for "m or more repetitions"
{,n}?                   Reluctant quantifier for "upto n repetitions"
\*?                     Reluctant quantifier for 0, or more
+?                      Reluctant quantifier for 1, or more
??                      Reluctant quantifier for 0 or 1 time


Possessive (very greedy) quantifiers
{m,n}+                  Possessive quantifier for "from m to n repetitions"
{m, }+                  Possessive quantifier for "m or more repetitions"
{,n }+                  Possessive quantifier for "upto n repetitions"
\*+                     Possessive quantifier for 0 or more
\++                     Possessive quantifier for 1 or more
?+                      Possessive quantifier for 0 or 1


Escapes and shorthands
\

\Q											Escape (quote) all characters up to \E
\E 											ends quoting begun with \Q

\t
\r
\n
\f                      (form feed) <-- still need to check when it's used?

\w   										character in  a word
\W											a NON-Word character

\d											Numeric digit
\D											NON-digit characr

\s											Whitespace
\S											a NON-whitespace character


Unicode blocks (representative samples)

\p{InGreek}   					a character in Greek block
\P{InGreek}  						a NON-Greek-block character

\p{Lu}									an uppercase letter
\p{Sc}									A currency symbol


POSIX-style character classes
(defined only for US-ASCII)

\p{Alnum}								Alphanumeric character   [A-Za-z0-9]
\p{Alpha}								Alphabetic characters
\p{ASCII}								Any ASCII character			 [\x00-\x7F]
\p{Blank}								space and tab
\p{Space}								space character
\p{Cntrl}								Control character
\p{Digit}								Numeric digit characters
\p{Graph}								Printable and visible characters (not space or control characters)

\p{Print}								Printable characters

\p{Punct}								Punctuation char

\p{Lower} 							Lowercase chars [a-z]
\p{Upper}

\p{XDigit}							Hexadecimal digits characters



*** UNIX regex only has greedy matching

*** Java regex has "Unicode characters" covered,  some languages may not have such function

*** RegEx compiles strings which are also compiled by "javac";  usually we need 2 levels of escaping for any special characters, including backslash, double quotest ...

    a. for example, RegEx  :  
					"You said it\."
		b. has to type in code as
		      "\"You said it\\.\""


    c. so, RegEx  \d+  writting in Java code needs to be \\d+




4.2 RegEx : Test for a pattern

java.util.regex


String pattern = "^Q[^u]\\d+\\.";

Pattern p = Pattern.compile(pattern);

String[] input = {
  "QA777. is the next flight. It is on time.",
	"Quak, Quack, Quack!"
}

for (String s : input) {
  boolean found = p.matcher(s).lookingAt();

	...
}



4.3 Finding matches

String patt = "Q[^u]\\d+\\.";

Pattern r = Pattern.compile(patt);

String line = "Order QT300. Now!";

Matcher m = r.matcher(line);

if (m.find()) {
  System.out.println(m.group(0));
} else {
  System.out.println("no match");
}



String input = "Adams, John Quincy";
Pattern r = Pattern.compile("(.*), (.*)");
Matcher m = r.matcher(input);
System.out.println(m.group(2) + " " + m.group(1));



4.4 Replacing matched text

replaceAll(newString)

appendReplacement(StringBuffer, newString)

appendTail(StringBuffer)


String patt = "\\bfavor\\b";
String input = "Do me a favor? Fetch my favorite";
//
Pattern r = Pattern.compile(patt);
Matcher m = r.matcher(input);
System.out.println("ReplaceAll : " + m.replaceAll("favour"));   // the result is ==>  ReplaceAll : Do me a favour? Fetch my favorite



m.reset();
StringBuffer sb = new StringBuffer();
while(m.find()) {
	m.appendReplacement(sb, "favour");
}
m.appendTail(sb);   // copy remainder
System.out.println(sb.toString());

// result ==>  Do me a favour? Fetch my favorite.



4.5 Print all occurrences of a pattern

Pattern patt = Pattern.compile("[A-Za-z][a-z]+");
BufferedReader r = new BufferedReader(new FileReader(args[0]));
String line;

while ((line = r.readLine()) != null) {
  Matcher m = patt.matcher(line);

	while (m.find()) {

	  // simplest method
		// System.out.println(m.group(0));

		// Get starting position of the txt
	  int start = m.start(0);
		int end   = m.end(0);

		System.out.println(line.substring(start, end));
  }
}




/**
 *    NIO version
 */

// pattern string in 1st arg
Pattern p = Pattern.compile(args[0]);

// File name in 2nd arg
FileChannel fc = new FileInputStream(args[1]).getChannel();

// map the file content
ByteBuffer buf = fc.map(FiuleChannel.MapMode.READ_ONLY, 0, fc.size());

// Decode ByteBuffer into CharBuffer
CharBuffer cb = Charset.forName("ISO-8859-1").newDecoder().decode(buf);

Matcher m = p.matcher(cb);
while (m.find()) {
  System.out.println(m.group(0));
}



4.6 Printing lines containing a pattern


  grep-like program



4.7 Controlling case in regular expression

*** using flags  Pattern.CASE_INSENSITIVE to indicate that matching should be case-independent 

Pattern p = Pattern.compile(patternString, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);

p.matches(inputString);



*** Pattern.CANNON_EQ (cannonical equivalence), chars matched by their base character, so that chars followed by the "combining char mark" (like the accent) can be matched either by the composite char or the letter followed by character mark for the accent
           .CASE_INSENSITIVE
					 .COMMENTS   (cause whitespace and comments to be ignored in pattern)
					 .DOTALL     (allows dot to match any regular char or newline)



4.8 Matching "Accented" or Composite characters

String pStr = "\u00e9gal";  // egal
String[] input = {
 "\u00e9gal", // egal -- this one had better match in this example
 "e\u0301gal", // e + "combing acute accent"
 "e\u02cagal", // e + "modifier letter acute accent"
 "e'gal", // e + single quote
 "e\u--b4gal", // e + Latin-1 "acute"
};

Pattern p = Pattern.compile(pStr, Pattern.CANNON_EQ);
Arrays.stream(input).forEach(
  s -> {
	  if (p.matcher(s).matches()) {
			System.out.println(pStr + " matches input " + s);
		} else {
			System.out.println(pStr + " NOT match input " + s);
		}
	});



4.9 Matching Newlines in Text


\n or 
\r

and

***  Pattern.MULTILINE

String input = "I dream of engines\nmore engines, all day long";

String[] pStrs  = {
 "engines.more engines",
 "ines\nmore",
 "engines$"
};

Arrays.stream(pStrs).forEach(
	pstr -> {
		Pattern p = Pattern.compile(pstr);
		boolean found = p.matcher(input).find();
		System.out.println("DEFAULT match " + found);

		Pattern p2 = Pattern.compile(pstr, Pattern.DOTALL | Pattern.MULTILINE);
		found = p2.matcher(input).find()
		System.out.println("Multiline match " + found);
  });



4.10 Apache Logfile Paring 

1) Apache log file excerpt

123.45.67.89 - - [27/Jan/2019:09:27:09 -0400] "GET /java/javaResources.html HTTP/1.0" 200 10450 "-" "Mozilla/4.6 [en] (X11; U; OpenBSD 2.8 i386; Nav)"


2) StringTokenizer may do the work,
   RegEx can do good as well

	 \^([\d.]+) (\S+) (\S+) \[([\w:/]+\s[+\-]\d{4}\] "(.+?)" (\d{3}) (\d+) "([\^"]+)" "([\^"]+)"


*** the above NON-greedy quantifier +?  in \"(.+?)\"
         to match the quoted strings

    cannot just use .+ because that would match TOO much (up to the quote at the end of the line).  



^^^ the above Pattern-String in Java code (note the Escape to the pattern-string)

String input = "123.45.67.89 - - [27/Jan/2019:09:27:09 -0400] \"GET /java/javaResources.html HTTP/1.0\" 200 10450 \"-\" \"Mozilla/4.6 [en] (X11; U; OpenBSD 2.8 i386; Nav)\"";

String pstr = 
  "^([\\d.]+) (\\S+) (\\S+) \\[([\\w:/]+\\s[+-]\\d{4}\\] " 
	+ "\"(.+?)\" (\\d{3}) (\\d+) \"([^\"]+)\" \"([^\"])\"";


Pattern p = Pattern.compile(pstr);
Matcher m = p.matcher(input);

if (!matcher.matches() 
    || LogExample.NUM_FIELDS != matcher.grouCount()) {
		System.err.println("bad log entry (or problem with regex):");
		return;
}

System.out.println("IP: " + matcher.group(1));
System.out.println("UserName: " + matcher.group(2));
System.out.println("Date/time: " + matcher.group(3));
System.out.println("Request: " + matcher.group(4));
System.out.println("Response: " + matcher.group(5));
System.out.println("Bytes Sent: " + matcher.group(6));
if (!matcher.group(8).equals("-")) {
  System.out.println("Referer: " + matcher.group(8));
}
System.out.println("User-Agent : " + matcher.group(9));






4.11 Data Mining


public final static String DATA_FILE = "book.sales";
public final static String GRAPH_FILE = "book.png";
// Note how this will be called from Java main method
public final static String PLOTTER_PROG = "/usr/local/bin/gnuplot";

public static void main(String[] args) throws Exception {
  Properties p = new Properties();

	p.load(new FileInputStream(
	  args.length == 0 ? "bookrank.properties" : args[1]));

	// get title, publisher, author, url from the above properties

	.
	.
	.


	// DRAW the Graph, using external plotting program against all historical data
	// can use gnuplot, R or any other math/graph program
	// also can use Java Plotting APIs
	PrintWriter pw = new PrintWriter( new FileWriter(DATA_FILE, true));

	String gnuplot_cmd = 
		  "set term png\n" 
		+ "set output \"" + GRAPH_FILE + "\"\n"
		+ "set xdata time\n"
		+ "set ylabel \"Biij sakes rabk\"\n"
		+ "set bmargin 3\n"
		+ "set logscale y\n"
		+ "set yrange [1:60000] reverse\n"
		+ "set timefmt \"%m %d %H %M %S %Y\"\n"
		+ "plot \"" + DATA_FILE 
		  + "\" using 1:7 title \"" + title + "\" with lines\n"; 



  if (!new File(PLOTTER_PROG).exists()) {
		System.out.println("plotting software not installed");
		return;
	}

	Process proc = Runtime.getRuntime().exec(PLOTTER_PROG);
	PrintWriter gp = new PrintWriter(prc.getOutputStream());
	gp.print(gnuplot_cmd);
	gp.close();
}







  if (!new File(PLOTTER_PROG).exists()) {
		System.out.println("plotting software not installed");
		return;
	}

	Process proc = Runtime.getRuntime().exec(PLOTTER_PROG);
	PrintWriter gp = new PrintWriter(prc.getOutputStream());
	gp.print(gnuplot_cmd);
	gp.close();
}




4.12 Full Grep

^^ the book has code (also on Github),  lot of code to handle options, files checking .... the core RegEx handling not much code needed.




Chapter 15 Internationalization and Localization

15.1 Creating a button with I18N resources

1) get ResourceBundle

ResourceBundle rb = ResourceBundle.getBundle("Menus");

2) Use Resourcebundle to fetch localized version of each control name

try {
  label = rb.getString("exit.label");
} catch (MissingResourceException e) {
  label = "Exit";  // fallback
}


*** what happened at Runtime?

Default locale is platform-dependent

UNIX/POSIX
   
	   per user;  LANG env variable

Windows

     control panel -> Regional settings

Mac OS X

     System Pref -> Language & Text



*** ResouceBundle.getBundle() locates a "file" with the named resource bundle name (Menus, in the above example),  plus an underscore and the locale name (if any locale is set), plus another underscore and the locale variabtion (if any variation is set), plus the .properties suffix.

1) default locale

   Menus.properties

2) French-Canadian 

   Menus_fr_CA.properties

.
.
.


*** setting the locale 

1) On Unix,  in .profile file,  

   export LANG=es_US

2) or, in test, can set it in System-Properties at Runtime from command-line option -D

   java -Duser.language=es pkg.I18NExample



15.2 List available Locales

Locale.getAvailableLocales()


15.3 Creating a Menu with I18N Resources


... similar to the above 15.1 example, the try-catch way with fallback 


15.4 Writing Internationalization Convenience Routtines

Menu makeMenu(ResourceBundle rb, String menuNm) {
  String label;

	try {
		(label = rb.getString(menuNm + ".label");
	} catch (Exception e) {
		label = menuNm;
	}

	return menu;
}



15.5 Creating a Dialog with I18N Resources

similar to the above menu example
.
.
.


15.6 Creating a Resource Bundle

1) can create java.util.ResourceBundle "subclass", but, better yet
2) create textual properties files, and ResourceBundle.getBundle() will pick them up

for example,

# Default Menu properties
# the file menu
file.label=File Menu
file.new.label=New File
file.new.key=N


15.7 Extracting strings from own program

.
.
.


15.8 Using particular Locale 

***  Locale.getInstance(Locale)

Locale l1 = Locale.FRANCE;
Locale l2 = new Locale("en", "UK");

DateFormat frDF = DateFormat.getDateInstance(DateFormat.MEDIUM, l1);

...



15.9 Setting Default Locale

Locale.setDefault();


Locale.setDefault.(Locale.FRANCE);



15.10 Formatting messages with MessageFormat

String s = MessageFormat.format("At {0, time} on {0, date}, {1} {2}", date, 35, "DOB");





*******  Server Side Programming  ***********

By the way, this book missed "Threads" part ...


16.1 open server socket

ServerSocket sock;
Socket clientSock;

try {
	sock = ServerSocket(9999);  // porter number 9999

	while((clientSock = sock.accept()) != null) {
		process(clickSock);
	}
}





*** more info

public static final short PORT = 9999;

// network interface
public static final String INSIDE_HOST = "acmewidgets-inside";

// number of clients allowed to queue
public static final int BACKLOG = 10;

ServerSocket sock;
Socket clientSock;

try {
	sock = new ServerSocket(PORT, BACKLOG, InetAddress.getByName(INSIDE_HOST));

	while ((clientSock = sock.accept()) != null) {
		process(clientSock);		// close socket when not used
	}

	... 

}




16.2 Returning a Response (String or Binary)


Socket clientSock = sock.accept();  // sock is the server socket
BufferedReader br = new BufferedReader(new InputStreamReader(clientSock.getInputStream(), "8859_1"));

PrintWriter pw = new PrintWriter(new OutputStreamWriter(clientSock.getOutputStream(), "8859_1"), true);

try {
	String line;
	while ((line = br.readLine()) != null) {
		pw.print(line + "\n");
		pw.flush();
	}
} finally {
	if (br != null) {
		br.close();
	}

	if (pw != null) {
		pw.close();
	}
}


// ^^^ improvement for the above, try-resource



16.3 Returning Object information Across a Network Connection

*** using ObjectOutputStream 


sock = new ServerSocket(9999);

Sock clientSock;
while((clientSock = sock.accept()) != null) {
	ObjectOutputStream oos = new ObjectOutputStream(clientSock.getOutputStream());

	oos.writeObject(new Date());

	oos.close();
}



16.4 Handling Multiple clients


ServerSocket sock;
Socket clientSock;

try {
	sock = new ServerSocket(9999);

	while (true) {
		clientSock = sock.accept();

		// create a thread to do communication
		new HandlerThread(clientSock).start();
	}
} catch (IOException e) {
	System.err.println("count not accept " + e);
	System.exit(1);
}


Class HandlerThread extends Thread {
	Socket sock;

	HandlerThread (Socket s) {
		sock = s;
	}

	public void run() {
		try {
			BufferedRead br = new BufferedReader(new InputStreamReader(sock.getInputStream());
			PrintStream ps = new PrintStream(sock.getOutputStream(), true);
			String line;

			while ((line = br.readLine()) != null) {
				ps.print(line + "\r\n");
				ps.flush();
			}
		} catch (IOException e) {
			System.out.println()"IO Error on socket " + e);
			return;
		}
	}
}




=============================


Improved version  (check EchoServerThread2 code)



passing "server socket" to "Thread", where 

class HandlerThread2 extends Thread {

	ServerSocket serverSock;
	int threadNumber;

	HandlerThread2 (ServerSocket s, int i) {
		serverSock = s;
		threadNumber = i;
	}

  sychronized(serverSocket) {
		clientSock = serverSocket.accept();
	}

	BufferedReader br = new bufferedReader(new InputStreamReader(clientSock.getInputStream()));

	PrintStream ps = new PrintStream(clientSock.getoutputStream(), true);

	String line;

	while ((line = br.readLine()) != null) {
		ps.print(line + "\r\n");
		ps.flush();
	}

	clientSock.close();

}




16.5 Serving the HTTP protocol


public class WebServer0 {
	public static final int HTTP_PORT = 80;

	public static final String CRLF = "\r\n";

	ServerSocket s;

	static final String VIEW_SOURCE_URL = "https://github.com/IanDarwin/javasrc/tree/master/src/main/java/network";

	public static void main(String[] argv) throws Exception {
		System.out.println("JavaWeb Server starting...");

		WebServer0 w = new WebServer0();
		w.runServer(HTTP_PORT);
	}

	protected ServerSocket getServerSocket(int port) throws Exception {
		return new ServerSocket(port);
	}

	public void runServer(int port) throws Exception {
		s = getServerSocket(port);

		while (true) {
			try {
				Socket cs = s.accept();
				handler(cs);
			} catch (IOException e) {
				System.err.println(e);
				return;
			}
		}
	}


	public void handle(Socket s) {
		BufferedReader br;
		PrintWriter pw;
		String request;

		try {
			String from = s.getIntetAddress().toString();
			br = new BufferedReader(new InputStreamReader(s.getInputStream()));
			request = br.readLine();

			pw = new PrintWriter(s.getOutputStream(), true);

			pw.print("HTTP/1.0 200 Response" + CRLF);
			pw.print("Content-type: text/html" + CRLF);
			String s1 = "<html><head><title>Wrong System Reached</title></head>";
			String s2 =", ....</body></html>\n";

			pw.print("Content-length: " + s1.length() + from.length() + s2.length()) + CRLF);
			pw.print(CRLF);
			pw.print(s1 + from + s2 + CRLF);
			pw.flush();
			
			s.close();
		} catch (IOException e) {
			System.out.println("IOException " + e);
		}

		return;
	}
}



16.6 Securing Web Server with SSL and JSSE


***  SSLServerSocketFactory vs ServerSocket  ***


public class JSSEWebServer0 extends WebServer0 {
	public static final int HTTPS = 8443;

	public static void main(String[] args) throws Exception {
		if (system.getProperty(java.net.ssl.keyStore") == null) {
			System.err.println("must pass in a keystore via -D; see documentation");
			System.exit(1);
		}

		System.out.println("JSSE Server starting ...");
		JSSEWebServer0 w = new JSSEWebServer0();
		w.runServer(HTTPS);
	}


	protected ServerSocket getServerSocket(int port) throws Exception {
		SSLServerSocketFactory ssf = (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();

		return ssf.createServerSocket(port);
	}

}





16.7 Network Logging 

1) Java standard logging API, can passing msg to Unix syslog

2) Apache Logging (log4j), 

3) Apache Jakart Commons Logging (JCL) 

4) SLF4J (simple logging facade for Java), a facade that can use the others

5) ...


*** log listener should be behind a firewall, so that hackers cannot making lot of connections to the log system, causing log disk full, causing slowdown system,  causing DoS (denial of service)


16.8 Network logging with SLF4J


public class Slf4jDemo {
  final static Logger log = LoggerFactory.getLogger(Slf4jDemo.class);

	public static void main(String[] args) {
		Object o = new Object();
		log.info("obj " + o);
	}
}



level 				Meaning
trace 				verbose debugging (disabled by default)
debug 				verbose debugging
info					low-level informational msg
warn					possible error
error					serious error



16.9 Logging with Log4J

Logger log = Logger.getLogger("com.MyClass");
log.info("created : " + new Object());


log4j.rootLogger=DEBUG, APP1
log4j.appender.APP1=org.apache.log4j.ConsoleAppender

log4j.appender.APP1.layout=org.apache.log4j.PatternLayout
.
.
.


16.10 Logging with java.util.logging

Logger log = Logger.getLogger("com.MyClass");

log.info("created : " + new Object());




16.11 Finding Network Interfaces

Enumeration lst = NetowrkInteface.getNetworkInteraces();

NetworkInterface ifs = (NetowrkInterface) lst.nextElement();

Enumeration addrs = ifs.getInetAddresses();

while (addrs.hasMoreElements()) {
	InetAddress addr = (InetAddress) addrs.nextElement();
}


16.12 Java Chat Server  (check GitHub for code example)

.
.
.



Chapter 17 -- Java and Electronic Mail


javax.mail  



17.2 

Sending Email over SMTP

1) create java.util.Properties object to pass information about the mail server,
2) load Properties with at least the hostname of SMTP mail server
3) create Session object
4) create Message from the Session object
5) set the From, To, CC addresses, and Subject in the Message
6) Set the message text into the message body
7) use static method Transport.send() to send message


Properties props = new Properties();
props.put("mail.smtp.host", "mailhost");
Session = Session.getDefaultInstance(props, null);
session.setDebug(true);

try {
	msg = new MimeMessage(session);

	msg.setFrom(new InternetAddress("nobody@host.domain"));

	InternetAddress toAddress = new InternetAddress(message_recip);
	msg.addRecipient(Message.RecipientType.TO, toAddress);

	InternetAddress cc = new InternetAddress(message_cc);
	msg.addRecipient(Message.RecipientType.CC, ccAddress);

	msg.setSubject(message_subject);

	msg.setText(message_body);

	// I18N: use setText(msgText.getText(), charset)

	// Send the message
	Transport.send(msg);

}




17.3 Mail-Enabling : a server program


javax.mail 




17.4 Sending MIME Mail

.
.
.


17.5 Providing Mail Settings

.
.
.

17.6 Reading Email

1) Get a Session using Session.getDefaultInstance(), can pass System.getProperties() 
2) get a Store from Session object
3) Get the root Folder
4) If the root Folder can contain subfolders, list them
5) For each Folder that can contain message, call getMessages(), which returns an array of Message objects
6) post-processing the message


Session session = Session.getDefaultInstance(System.getProperties(), null);
session.setDebug(false);

FileProperties fp = new FileProperties(fileName);
String protocol = fp.getProperty(MailConstants.RECV_PROTO);

Store store = session.getStore(protocol);

store.connect(host, user, password);

Folder rf;

rf = store.getFolder(root);

rf.open(Folder.READ_WRITE);




17.7 Program : MailReaderBean

check GitHub



17.8 Program: MailClient






Chapter 18 -- Database Access


JPA 

1) write, annotate, compile POJO data classes
2) create an XML file persistence.xml (this name is mandatory), containing the database access information, and listing the entity classes.
3) obtain an EntityManagerFactory from the Persistence factory class
4) Obtain an EntityManager from the EntityManagerFactory
5) to save data, get the transaction, make the objects persistent by calling, eg, EntityManager.save(object), and commit
6) to load data objects, load them by primary key or use query


import javax.persistence.*;

@Entity
public class Address {
 private int id;

 private String streetAddr;
 private String city;
 private String cntry;

 @Id
 @GeneratedValue(strategy = GenerationType.AUTO)
 public int getId() {
 	return id;
 }

}


public class JPASimple {

	@SuppressWarnings("unchecked")
	public static void main(String[] args) {
		
		EntityManagerFactory nmf = null;
		EngityManager em = null;

		try {
			emf = Persistence.createEntityManagerFactory("jpademo");
			em = emf.createEntityManager();

			EntityTransaction xaction = em.gettransaction();
			xaction.begin();

			Person p = new Person("Tom", "Hanks");
			em.persist(p);
			xaction.commit();

			int id = p.getId();

			xaction = em.getTransaction();
			xaction.begin();

			Query q = em.createQuery("select p from Person p order by p.lastName");

			List<Person> lst = q.getResultList();

			lst.forEach(p -> System.out.println(p.getFirstName() + ' ' + p.getLastName()));

		} finally {

			if (em != null) {
				em.close();
			}

			if (emf != null) {
				emf.close();
			}
		}
	}
}



<persistence ...>
.
.
.




18.2 JDBC setup and connection


