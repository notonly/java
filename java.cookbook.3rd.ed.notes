BattleShip (the classic naval combat game) <-- by MB (Milton Bradley ..

1.4 using CLASSPATH  effectively


java -classpath ~/example1/ex1.jar Example1

1) java interpreter looks dirs defined in CLASSPATH;

2) os tracing tool (trace, strace, truss, ktrace),  can see Java opens (or, stat, or access) the class file.

3) jdk class files,  in system props  (sun.boot.class.path)

4) jar file, unlike the single class file (using directory in classpath);  JAR file, needs to be in CLASSPATH defn

5) Web applications may NOT use bootpath or CLASSPATH;  those web apps having own ClassLoader, and set web app classpath to include WEB-INF/classes  (and the JAR files in WEB-INF/lib)

6) Create class files into CLASSPATH directories

   javac -d $HOME/classes Example1.java
	 java  -cp $HOME/classes/ pkg.Example1   (note, this command can be run from anywhere)


7) managing CLASSPATH in own env,

   set a base/main directory in $CLASSPATH
	 then make OPT_JARS including other JAR files or class-dirs;  and then adding them to $CLASSPATH


8)


1.5 Code Examples

   GitHub (https://github.com/IanDarwin/javasrcee)  

	 https://github.com/notonly/javasrc

	    javasrc
			darwinsys-api  (



1.9 Dealing with Deprecation Warnings

   javac -deprecation Example1.java

	 1) @Deprecated on method or class
	 2) @deprecated on javadoc

	 *) Rule of thumb:  if method/class is deprecated; NEW CODE should avoid using it.


1.10  check if we us  "System.properties"  for Runtime Debug (most likely NOT,  because, turn it on for RunTime requires rebooting the JVM.   We have re-load;  also some JMX stuff ... for updating the Log4J log level etc) ...

    if (System.getProperty("debug.fetch") != null) {
		    System.err.println("runtime debugging turned on");
		}

  java Example1   // will not see the debug

	java -Ddebug.fetch Example1   // will see the debugging, because the Runtime System.properties turned on, and code/class got the value


1.11  Correctness with Assertions


... Fast Forwarding ...

Chapter 9: Functional Programming

1) pure function, no side-effects, results depend only on their inputs and not on mutable state elsewhere in program
2) first-class function
3) Immutable data
4) extensive use of recusion and Lazy Evaluation


9.1 Using lambdas/closures in place of inner classes


My own notes:  how does Java implement (Java Compiler) handle closure -->  in the hood, still make closure to inner-class, and then some dynamic link (for groovy) type logic (vaguely remembered the Brian Goetz's presention ...





