

Algorithms for dummies by John Paul Mueller and Luca Massaron, 2017


Chapter 1: introduction

1) searching

2) sorting

3) transforming (Fast Fourier Transform -- FFT)

4) scheduling  (UniTime)

5) Graph analysis

6) cryptography

7) pseudorandom number generations

8) AI algorithms



CPU and GPU

Special-purpose chips


leveraging networks

leveraging available data


Distinguishing between Issues and Solutions

1) being correct and efficient

2) adapting strategy to the problem

3) describing algorithms in a lingua franca (?) 

Facing hard problems


*** Structuring data to obtain a solution 



Chapter 2 Considering Algorithm Design


1) modeling real-world problems

2) Dividing and Conquering 

3) Avoiding brute-force solutions

4) starting by making it simpler

5) BREAKING down a problem is usually better

6) Computing Costs and Following Heuristics

7) Evaluating algorithms

--> simulating using abstract machines
--> getting more abstract


O(1) - constant complexity
O(logn) - logarithmic complexity
O(n) - linear complexity
O(nlogn) - linearithmic complexity
O(n^2) - Quadratic
O(n^3) - Cubic
O(2^n) - Exponential
O(n!) - Factorial


Chapter 3 - Using Python to work with Algorithms

1) obtaining Analytics Anaconda

2) installing Python on MacOS

https://mas-dse.github.io/startup/anaconda-macosx-install/

3) Downloading the Datasets and Example Code

--> using Jupyter Notebook

go to $HOME/anaconda3/scripts
and type	"jupyter Notebook"  to open it on browser



Chapter 4 Python intro

1) function

  a. define function

			def DoSum(v1, V2)
				return v1 + v2


	b. calling function

			DoSum(3, 5)

			# calling by argument names
			DoSum(v1 = 3, v2 = 5)


2) conditions 

    if value == 5:
			print('value is 5')
		elif value == 6:
			print('value is 6')
		else:
			print('value is other than 5, 6')



		 # nested decisions
     if (v1 > 1) and (v2 < 10):
		 	if (v2 >5) and (v2 < 8):


3) loop

		for w in words:
			if w.upper() == 'CONT':
				continue
			elif w.upper() == 'BREAK':
				break
			else:
				...


    while flag == True:
			.
			.
			.

			if ...:
				flag = False

		.
		..



4) Sets, Lists, Tuples

setA = set(['red', 'blue', 'green'])


listA = [1, 2, 3]



tupleA = (1, 2, 3, (4, 5, (6, 7, 8)))



			






