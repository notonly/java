

Chapter 15 -- NIO, XML serialization


1) java.io
2) java.nio


15.3 Using NIO classes and Interfaces to get file and directory information

Path (interface) -- represent location of a file or dir; but not open file

Paths (class) -- provides static methods used to get Path object

Files (class) -- provides static methods for common file and dir manipulation: copying, creating, or deleting files and dirs;  
Files


DirectoryStream (interface) -- to iterate throught the contents of a dir


*** Aboslute vs Relative Paths


Example :

Path path = Paths.get("/tmp");

if (Files.exists(path)) {
	path.getFileName();
	Files.getLastModifiedTime(path);
	Files.size(path);
	path.toAbsolutePath();

	if (Files.isDirectory(path)) {
		DirectoryStream<Path> dirStream = Files.newDirectoryStream(path);

		// ? using foreach on stream ?   DirectoryStream may be not a Java 8 stream 
		// Yea, "stream" in IO is stream, NOT Java 8 type of streams ...
		for (Path p : dirStream) {
			System.out.println(p);
		}
	}
}




15.4 Sequential Text Files


1) creating a Sequential Text File

try (Formatter output = new Formatter("clients.txt")) {
	Scanner input = new Scanner(System.in);

	while (input.hasNext()) {
		try {
			output.format("%d %s %s %.2f%n", input.nextInt(),
										input.next(), input.next(), input.nextDouble());
		} catch (NoSuchElementException ex) {
			input.nextLine();
		}
	}
}


2) Reading Data from a Sequential Text File

try (Scanner input = new Scanner(Paths.get("clients.txt"))) {
	
	while (input.hasNext()) {
		System.out.println("%-10d%-12s%10.sf%n", input.nextInt(),
											 input.next(), input.next(), input.nextDouble());
	} 
} catch (IOException | NoSuchElementException) {
	...
}



15.5 XML Serialization


1) creating a sequential file using XML serialization

	try (BufferedWriter output = Files.newbufferedWriter(Paths.get("clients.xml"))) {
		Scanner input = new Scanner(System.in);

		while (input.hasNext()) {
			try {
				Account record = new Account(input.nextInt(), input.next(), input.next()
																		 input.nextDouble());

				accounts.getAccounts().add(record);
			} catch (NoSuchElementException ex) {
				input.nextLine();
			}
		}

		JAXB.marshal(accounts, output);
	} catch (IOException e) {
		....
	}



2) Reading and Deserializaing Data from a Sequential File

	try (BufferedReader input = Files.newBufferedReader(Paths.get("clients.xml"))) {

		Accounts accounts = JAXB.unmarshal(input, Accounts.class);

		accounts.forEach(System.out::println);
	} catch (IOException ex) {
		.
		.
		.
	}



15.6 FileChooser and DirectoryChooser ...


1) Pipe Streams --> "synchronized" communication channel between "threads".  

   PipedOutputStream, PipedInputStream

2) Filter Streams --> providing additional functionality, such as aggregating bytes into meaningful primitive-type units

		FilterInputStream, FilterOutputStream

		PrintStream performs text output to specified Stream


3) Data Streams --> help read data as aggregates of bytes that form ints, floats, doubles and ....


4) Buffered Streams --> directed to a region in "memory" called a "buffer" that is large enough to hold the data of many output operations ... 

    "physical output operation"
		"logical output operation"


		"flush" method

5) Memory-based byte Array Streams --> "byte arrays in memory" ...

   ByteArrayInputStream, 


6) Sequencing Input from Multiple Streams  -->  logically concatenates several InputStreams ... 

   SequnceInputStream   (not used before)





15.7.2 Interfaces and classes for Character-Based Input and Output

1) Char-based buffering Readers/Writers

    BufferedReader/Writer

2) Momoery-based char Array Readers/Writers

		CharArrayReader/Writer

3) char-based File, Pipe, String Reader/Writer

		InputStreamReader/Writer
		PipedReader/Writer
		StringReader/Writer




Chapter 16:  Generic Collection

1) Object-based collections


2) Generic collections



16.3 Type-wrapper classes

Boolean, Byte, Character, Double, Float, Integer, Long, Short


16.4 Autoboxing, Auto-Unboxing


16.5 Interface Collection,  Class Collections


16.6 Lists

	a) ListIterator
	
	b) ArrayList

	c) LinkedList


	List<String> lst = new ArrayList<>();
	lst.add("a");
	lst.add("z");

	Iterator<String> iterator =lst.iterator();

	while (iterator.hasNext()) {
		iterator.next();
	}



16.6.2 LinkedList

.
.
.


16.7 Collections Methods

	sort
	binarySearch
	reverse
	shuffle
	fill				sets every List element to refer to a specified object
	copy
	min
	max
	addAll
	frequency
	disjoint		determines whether two collections have no elements in common



16.8 PriorityQueue




16.9 Sets


"Sorted Sets" -->  TreeSet 


16.10 Map 

"sorted map"  --> TreeMap



16.11 Synchronized Collections

List<String> list1 = new ArrayList<>();

List<String> l2 = Collections.syncrhonizedList(list1);


16.12 Unmodifiable collections  -- Immutable collections

List<String> list1 = new ArrayList<>();
List<String> l2 = Collections.unmodifiableList(list1);


16.13 Abstract Implementations

AbstractCollection/List/Map/Set/Queue


16.14  Java SE 9:   convenience Factory methods for Immutable Collections


List.of("a", "b");

Set.of("a", "b");

Map.of("a", 1, "b", 2);

Map.ofEntries(
	Map.entry("Jan", 31),
	Map.entry("Feb", 28));




Chapter 17 Lambdas and Streams


1) an example 

IntStream.rangeClosed(1, 10).map((int x) -> x * 2).sum();


2) Intermediate operations

filter
distinct
limit
map
sorted

3) Terminal operations

forEach

"Reduction operations"

average
count
max
min
reduce


4) concatenating strings with "collect"

InteStream.range(1, 5).sorted().mapToObject(String::valueOf).collect(Collectors.joining(","));


5) Terminal Operation "reduce"

int[] values = {3, 5, 7, 9, 11};

IntStream.of(values).reduce(0, (x, y) -> x + y);

// the first argument to reduce -- 0 -- is the operation's identity value;
// the second argument is a "method" that receives two-int-values (representing left and right operands of a binary operator), performs a calculation with the values and returns the results.

0 + 3 -> 3
3 + 5 -> 8
8 + 7 -> 15
15 + 9 -> 24
24 + 11 -> 35


InteStream.of(values).reduce((x, y) -> x + y).getAsInt();

// reduce with one-argument, returns an OptionalInt,  

3 + 5 -> 8
8 + 7 -> 15
15 + 9 -> 24
24 + 11 -> 35




17.8 Functional Interfaces

java.util.function

Interface							Description
-----------------			----------------------------
BinaryOperator<T>
Consume<T>
Function<T, R>
Predicate<T>
Supplier<T>
UnaryOperator<T>



17.9 Lambdas: A Deeper Look

1) scope and lambdas

2) capturing lambdas and final local variables


17.10 Sorting a stream and collecting the results

Arrays.stream(values).sorted().collect(Collectors.toList());


Arrays.stream(stringArray).filter(s -> s.compareToIgnoreCase("n") < 0)
												  .sorted(String.CASE_INSENSITIVE_ORDER.reversed())
													.collect(Collectors.toList());


3) short-circuit stream pipeline processing

list.stream().filter(...).findFirst().get();   // findFirst() returns an Optional, if no values, get() will throw exception




17.12.5 Grouping ....

Map<String, List<Employee>> groupedByDept = list.stream().collect(Collectors.groupingBy(Employee:getDepartment));

groupbyDept.forEach((dept, empInDept) -> { System.out.println("department: " + dept);
																						empInDept.forEach(e -> System.out.println(e));
																					});


17.12.6 Counting the number of employees in each department

Map<String, Long> empCntsByDept = List.stream().collect(Collectors.groupBy(Employee::getDepartment, Collectors.counting()));

empCntsByDept.forEach((dept, cnt) -> System.out.println("department " + dept + ", number of emps " + cnt));



// calculate sum of Emp salaries with stream reduce method

list.stream().mapToDouble(Employee::getSalary)
					   .reduce(0, (v1, v2) -> v1 + v2);


list.stream().mapToDouble(Employee::getSalary).average().getAsDouble();




17.13 Creating a Stream<String> from a File

Pattern p = Pattern.compile("\\s+");

// count occurrences of each word in a Stream<String> sorted by word
Map<String, Long> wordCounts = Files.lines(Paths.get("example.file.txt"))
			.flatMap(line -> p.splitAsStream(line))
			.collect(Collectors.groupingBy(String::toLowerCase, TreeMap::new, Collectors.counting());


// display the words grouped by starting letter
wordCounts.entrySet().stream()
	.collect(
		Collectors.groupingBy(entry -> entry.getKey().charAt(0), TreeMap::new, Collectors.toList()))
	.forEach((letter, wordList) -> {
				System.out.printf("letter: " + letter);
				wordList.stream().forEach(word -> System.out.println("word: " + word.getKey() + ", number: " + word.getValue()));
			});



==>  results ==>

A
	  	       a: 2
 	         and: 3

B
         begin: 1

C
    calculates: 1
	
	.
	.
	.



*** Note the above Pattern::splitAsStream



17.15 Infinite Streams


IntStream.iterate(1, x -> x + 1)			// creating infinite stream
	.limit(10)													// set limits
	.forEach(System.out::println);			// terminal operation



17.16 Lambda Event Handler





Chapter 18  Recursion 


Need to revisit <-- also need to combine this with Dynamic Programming



Chapter 19 Generic Classes and Methods


19.3 Generic methods: implementation and compile-time translation

public static<T> void printArray(T[] inputArray) {
	for (T elem : inputArray) {
		System.out.println(elem);
	}
}


*** Erasure at compilation time :  by default, all generic types are replaced with type "Object", as shown below

(in C++ templates, a separate copy of the source code is generated, and compiled for every type passed as an argument to the method)


public static void printArray(Object[] inputArray) {
	for (Object elem: inputArray) {
		System.out.println(elem);
	}
}


19.4 Additional compile-time translation issues: methods that use a type parameter as the "return type"

public static<T extends Comparable<T>> T maximum(T x, T y, T z) {
	T max = x;

	if (y.comparTo(max) > 0) {
		max = y;
	}
	if (z.compareTo(max) > 0) {
		max = z;
	}

	return max;
}

*** specifying a type parameter's "upper bound"
T extends Comparable<T>  --- only objects of classes that implement interface Comparable<T> can be used with this method.


*** "Upper Bound" may be a comma-separated list that contains zero or one class and zero or more interfaces

*** maximum method's type parameter is "more restrictive" than the one for "printArray".



*** Erasure and the Upper Bound of a Type Parameter   (NOTE, it uses "UPPER BOUND", instead of "Object") 

public static Comparable maximum(Comparable x, Comparable y, Comparable z) {
	Comparable max = x;

	if (y.compareTo(max) > 0) {
		max = y;
	}
	if (z.compareTo(max) > 0) {
		max = z;
	}

	return max;
}



19.5 Overloading Generic methods

Generic method may be overloaded like any other method.



19.7 Generic Classes

public class Statck<E> {
	private final ArrayList<E> elements;

	// no-arg ctor
	public Stack() {
		this(10);
	}

	public Stack(int cap) {
		int initCap = cap > 0 ? cap : 10;
		elemetns = new ArrayList<E>(initCap);
	}

	public void push(E val) {
		elements.add(val);
	}

	public E pop() {
		if (elements.isEmpty()) {
			throw new NoSuchElementException("stack is empty, cannot pop");
		}

		return elements(remove(elements.size() - 1);
	}
}




*** creating Generic Methods to Test Generic Class Stack<E>

public class StackTest {


	public static void main(String[] args) {

		Double[] ds = {1.1, 3.1, 5.3};
		Integer[] ins = {1, 3, 5, 7};

		Stack<Double> dstack = new Stack<>(5);
		Stack<Integer> istack = new Stack<>();  // the default is 10 capacity

		testPush("doubleStack", dstack, ds);
		testPop("doubleStack", dstack);

		testPush("integerStack", istack, ins);
		testPop("integerStack", istack);
	}

	public static <E> void testPush(String name, Stack<E> stack, E[] elements) {
		System.out.println("pusing element to " + name);
		Arrays.stream(elements).forEach(e -> stack.push(e));
	}

	public static <E> void testPop(String name, Stack<E> stack) {
		System.out.println("popping element from " + name);
		try {
			E popval;

			while (true) {
				popval = stack.pop();
				System.out.println("popped out: " + popval);
			}
		} catch (NoSuchElementException e) {
			e.printStackTrace();
		}
	}
}


		


19.7 Wildcards in Methods that accept type parameters

public class WildcardTest {

	public static double sum(List<? extends Number> list) {
		double rslt = 0;

		// Note, the UPPER BOUND type is used in the looping;  
		// because of  "? extends Number",  anything of Number type,  so, using Number will cover the passed in types of "? extends Number"

		for (Number elem : list) {
			rslt + elem.doubleValue();
		}

		return rslt;
	}


	public static void main(String[] args) {
		Number[] nbrs = {1, 2.4, 3, 4.1, 5};

		List<Number> nbrlst = new ArrayList<>();

		for (Number e : nbrs) {
			nbrlst.add(e);
		}

		System.out.println("total of the elements in the nbrs is " + sum(nbrlst));
	}
}



*** wildcard restrictions ;  the wildcard "?" cannot be used inside the method, because it does NOT specify any type.

But, the type "T" can be used inside maximum method, because T is a specified type (for the method signature)



